import React, { Component } from "react";
import styled from "styled-components";
import Button from "@material-ui/core/Button";
import TextField from "@material-ui/core/TextField";
import FormControl from "@material-ui/core/FormControl";
import InputLabel from "@material-ui/core/InputLabel";
import Select from "@material-ui/core/Select";
import MenuItem from "@material-ui/core/MenuItem";
import { listarServi√ßos } from "../api";
import { ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";

const Filtro = styled.section`
  border: 1px solid black;
  display: grid;
  justify-content: center;
  grid-template-columns: 1fr;
  row-gap: 16px;
  padding: 32px;
`;

const Orderna√ß√£o = styled.section`
  border: 1px solid black;
  display: grid;
  justify-content: center;
  grid-template-columns: 1fr;
  row-gap: 16px;
  padding: 32px;
`;

const Card = styled.div`
  display: flex;
  display: flex;
  flex-direction: column;
  align-items: center;
  background-color: white;
  border: 1px outset darkgrey;

  button {
    display: flex;
    align-self: center;
    margin-bottom: 16px;
    border-radius: 8px;
  }
`;

const BotaoCarrinho = styled.div`
  display: flex;
  justify-content: right;
`;

export default class Contratante extends Component {
  state = {
    servi√ßos: [],
    carrinho: [],
    m√≠nimo: "",
    m√°ximo: "",
    t√≠tulo: "",
    descri√ß√£o: "",
    ordernar: "T√≠tulo A-Z",
  };

  componentDidMount() {
    this.listarServi√ßos();
    const carrinho = JSON.parse(localStorage.getItem("carrinho")) || [];
    this.setState({ carrinho });
  }

  componentDidUpdate() {
    localStorage.setItem("carrinho", JSON.stringify(this.state.carrinho));
  }

  listarServi√ßos = () => {
    listarServi√ßos()
      .then((certo) => {
        this.setState({ servi√ßos: certo.data.jobs });
      })
      .catch((errado) => {
        alert(`Erro ao pegar os servi√ßos\nErro:${JSON.stringify(errado)}`);
      });
  };

  filtro = (servi√ßo) => {
    const { title, price, taken, description } = servi√ßo;

    let m√≠nimo = Number(this.state.m√≠nimo);
    let m√°ximo = Number(this.state.m√°ximo);
    const t√≠tulo = new RegExp(this.state.t√≠tulo, "i");
    const descri√ß√£o = new RegExp(this.state.descri√ß√£o, "i");

    if (!m√≠nimo || m√≠nimo < 0) m√≠nimo = -Infinity;

    if (!m√°ximo || m√≠nimo > m√°ximo || m√°ximo <= 0) m√°ximo = Infinity;

    return (
      !taken &&
      price >= m√≠nimo &&
      price <= m√°ximo &&
      title.match(t√≠tulo) &&
      description.match(descri√ß√£o)
    );
  };

  ordernar = (servi√ßoA, servi√ßoB) => {
    if (this.state.ordernar === "T√≠tulo A-Z")
      return servi√ßoA.title.localeCompare(servi√ßoB.title, {
        ignorePunctuation: true,
      });

    if (this.state.ordernar === "T√≠tulo Z-A")
      return servi√ßoB.title.localeCompare(servi√ßoA.title, {
        ignorePunctuation: true,
      });

    if (this.state.ordernar === "Valor Crescente")
      return servi√ßoA.price - servi√ßoB.price;

    if (this.state.ordernar === "Valor Decrescente")
      return servi√ßoB.price - servi√ßoA.price;

    if (this.state.ordernar === "Prazo Crescente")
      return new Date(servi√ßoA.date) - new Date(servi√ßoB.date);

    if (this.state.ordernar === "Prazo Decrescente")
      return new Date(servi√ßoB.date) - new Date(servi√ßoA.date);
  };

  changeInputValues = (event) => {
    this.setState({ [event.target.name]: event.target.value });
  };

  lidarCarrinho = (servi√ßo) => {
    if (this.state.carrinho.find((carrinho) => carrinho.id === servi√ßo.id))
      return this.removerDoCarrinho(servi√ßo.id);

    return this.adicionarNoCarrinho(servi√ßo);
  };

  removerDoCarrinho = (id) => {
    if (!window.confirm("Tem certeza que deseja remover o item do carrinho?"))
      return;

    const carrinho = this.state.carrinho.filter((servi√ßo) => servi√ßo.id !== id);
    this.setState({ carrinho });
    toast.dark("Item removido com sucesso")
  };

  adicionarNoCarrinho = (servi√ßo) => {
    this.setState({ carrinho: [...this.state.carrinho, servi√ßo] });
    return toast.dark("Servi√ßo adicionado ao carrinho üõíüê±‚Äçüë§");
  };

  render() {
    const mostraServi√ßos = this.state.servi√ßos
      .filter(this.filtro)
      .sort(this.ordernar)
      .map((servi√ßo) => (
        <Card key={servi√ßo.id}>
          <h4>{servi√ßo.title}</h4>
          <h4>{servi√ßo.description}</h4>
          <p>{`R$ ${servi√ßo.price}`}</p>
          <Button
            variant="contained"
            onClick={() => this.lidarCarrinho(servi√ßo)}
          >
            {`${
              this.state.carrinho.find((carrinho) => carrinho.id === servi√ßo.id)
                ? "Remover do"
                : "Adicionar ao"
            } carrinho`}
          </Button>
        </Card>
      ));

    return (
      <main>
        <Button variant="contained" onClick={this.props.irParaIn√≠cio}>
          Ir Para A P√°gina Inicial
        </Button>
        <Filtro>
          <h4>Filtro</h4>
          <TextField
            placeholder="Buscar Por T√≠tulo"
            label="T√≠tulo"
            name="t√≠tulo"
            value={this.state.t√≠tulo}
            onChange={this.changeInputValues}
            variant="outlined"
          />
          <TextField
            placeholder="Buscar Por Descri√ß√£o"
            label="Descri√ß√£o"
            name="descri√ß√£o"
            value={this.state.descri√ß√£o}
            onChange={this.changeInputValues}
            variant="outlined"
          />
          <TextField
            placeholder="Valor M√≠nimo Do Servi√ßo"
            label="Valor M√≠nimo"
            name="m√≠nimo"
            value={this.state.m√≠nimo}
            onChange={this.changeInputValues}
            variant="outlined"
          />
          <TextField
            placeholder="Valor M√°ximo Do Servi√ßo"
            label="Valor M√°ximo"
            name="m√°ximo"
            value={this.state.m√°ximo}
            onChange={this.changeInputValues}
            variant="outlined"
          />
        </Filtro>
        <Orderna√ß√£o>
          <FormControl>
            <InputLabel id="ordena√ß√£o-label">Orderna√ß√£o</InputLabel>
            <Select
              variant="outlined"
              labelId="ordena√ß√£o-label"
              name="ordernar"
              label="Orderna√ß√£o"
              value={this.state.ordernar}
              onChange={this.changeInputValues}
            >
              <MenuItem disabled value="">
                <em>Ordenar Por</em>
              </MenuItem>
              <MenuItem value="T√≠tulo A-Z">T√≠tulo A-Z</MenuItem>
              <MenuItem value="T√≠tulo Z-A">T√≠tulo Z-A</MenuItem>
              <MenuItem value="Valor Crescente">Valor Crescente</MenuItem>
              <MenuItem value="Valor Decrescente">Valor Decrescente</MenuItem>
              <MenuItem value="Prazo Crescente">Prazo Crescente</MenuItem>
              <MenuItem value="Prazo Decrescente">Prazo Decrescente</MenuItem>
            </Select>
          </FormControl>
        </Orderna√ß√£o>
        <BotaoCarrinho>
          <Button variant="contained" onClick={this.props.irParaCarrinho}>
            Ver Carrinho
          </Button>
        </BotaoCarrinho>
        {mostraServi√ßos}
        <ToastContainer
          position="top-center"
          autoClose={2000}
          hideProgressBar={false}
          newestOnTop={false}
          closeOnClick
          rtl={false}
          pauseOnFocusLoss
          draggable
          pauseOnHover
        />
      </main>
    );
  }
}
